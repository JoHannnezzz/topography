{"name":"Topography","tagline":"","body":"# Topography scripts\r\n\r\nTo set paths:\r\n\r\n\tsetpaths;\r\n\r\n## Clustering ##\r\n\r\n### embedding.py ###\r\n\r\nTo create cluster results based on individual connectivity matrices:\r\n\r\n\tembedding.py -s <subject> -f <output filebasename>\r\n\r\n\twhere input is a connectivity matrix saved as a .mat file.\r\n\r\n\r\n## Paths through cluster results: ##\r\n\r\n### DoFindPaths.m ###\r\n\r\n\t[clus, randpath] = DoFindPaths(n);\r\n\r\n\twhere `n` is the number of permutations,\r\n\tand a config file is loaded in the script.\r\n\r\nThen set config file for path order as in: \r\n\r\n\tconfig/config_my18_path.m\r\n\r\nAnd finally, to run permutation test on path order:\r\n\r\n\trandPath = pathsPermute(clus, n);\r\n\r\n### find_similar_paths.py ###\r\n\r\nTo find most common paths through a cluster map.\r\n\r\n\r\n## Distance maps ##\r\n\r\n### Calculating distance from DMN on the group-level ###\r\n\t\r\n\t[distDMN] = loadDistDMN_group(hemi);\r\n\r\nNew peaks can also be derived from `clus.peaks(find(clus.edgeNet == 13))`\r\n\r\n\t[dist, zone] = distExactGeodesic(clus.peaks(find(clus.edgeNet == 13)), '32', 'L', 'zones', '1');\r\n\r\nwhere `XX = DMN network from cluster results` \r\n\r\n### Comparing to myelin maps ###\r\n\r\n\tDoMyelin();\r\n\r\n### Calculating distance from DMN on the individual-level ###\r\n\r\n\t[distances, zones, surfi_164] = loadDistDMN_individual(sub, hemi);\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}